openapi: 3.1.0
info:
  title: DOKUMENTASI API
  description: >-
  termsOfService: https://github.com/jscroot/examples/tree/main/api/swagger
  contact:
    email: prisyahaura15@gmail.com
  license:
    name: 
    url: 
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
servers:
  - url: https://asia-southeast2-prisya-project.cloudfunctions.net/
paths:
  /getall:
    get:
      tags:
        - Get All
      summary: Get Data Geospasial
      description: List Data Geospasial
      operationId: getGeoJSON
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Login'
        '400':
          description: Invalid status value

  /Login:
    post:
      tags:
        - user
      summary: Login get Token
      description: Login and Get User Token
      operationId: authService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '405':
          description: Invalid input
      security:
        - token:
          - write: apiKey
          - read: apiKey

  /Gis:
    get:
      tags:
        - Gis Location
      summary: Get Data Geospasial
      description: List Data Geospasial
      operationId: getGeoJSONGis
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Peta'
        '400':
          description: Invalid status value

components:
  schemas:
    Peta:
      type: object
      properties:
        type:
          type: string
        geometry:
          type: object
          properties:
            type:
              type: string
            coordinates:
              type: array
        properties:
          type: object
          properties:
            name:
              type: string
    Auth:
      type: object
      properties:
        username:
          type: string
          example: petped
        password:
          type: string
          example: secret
    AuthResponse:
      type: object
      properties:
        status:
          type: bool
          example: false
        message:
          type: string
          example: fehguy
        token:
          type: string
          example: fehguy
    Login:
      type: object
      properties:
        username:
          type: string
          example: petped
        password:
          type: string
          example: secret
        Role:
          type: string
          example: admin || user
    Delete:
      type: object
      properties:
        username:
          type: string
          example: "zz"
  requestBodies:
    AuthReq:
      description: Request Authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Auth'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AuthResponse'
  securitySchemes:
    token:
      type: apiKey
      name: token
      in: header